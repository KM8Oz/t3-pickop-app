// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String  @map("user_id")
//   type              String
//   provider          String
//   providerAccountId String  @map("provider_account_id")
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

model User {
  id                String               @id @default(uuid())
  username          String               @unique
  name              String?
  bio               String?              @db.Text
  website           String?
  email             String?              @unique
  provider          String
  password          String?
  badge             String?
  followingCount    Int?                 @default(0)
  followersCount    Int?                 @default(0)
  bgImage           String?
  profileImage      String?
  isVerifiedtoDrive VerificationToDrive?
  Car               Car[]                @relation("userCars")
  Rating            Rating[]
  favorites         Like[]               @relation("favorites")
  favIds            String[]
  received_orders   Order[]              @relation("OwnerOrders")
  sent_orders       Order[]              @relation("SenderOrders")
  followers         Follow[]             @relation("Followers")
  following         Follow[]             @relation("Following")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@map("users")
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("follows")
}

model Like {
  id        String   @id @default(uuid())
  liker     User     @relation("favorites", fields: [likerId], references: [id])
  likerId   String
  liked     Car      @relation("likedby", fields: [likedId], references: [id])
  likedId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model VerificationToDrive {
  id            String  @id @default(cuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique
  idDocument    String? @unique
  driverLicence String? @unique
  status        String? @default("pending")

  @@map("driververifications")
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }

model Car {
  id          Int       @id @default(autoincrement())
  name        String
  location    String
  geo         Geo?
  geoId       Int?
  medias      Media[]
  pricePerDay Int
  discount    Int
  features    Feature[]
  likecount   Int       @default(0)
  ratingcount Int       @default(0)
  ratings     Rating[]
  tags        Tag[]
  Order       Order[]
  User        User?     @relation(name: "userCars", fields: [userId], references: [id])
  userId      String?
  favoredby   Like[]    @relation("likedby")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("cars")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique()
  cars      Car[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Rating {
  id         Int      @id @default(autoincrement())
  rating     Int
  text       String?
  car        Car      @relation(fields: [carId], references: [id])
  carId      Int
  reviewer   User     @relation(fields: [reviewerId], references: [id])
  reviewerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("ratings")
}

model Media {
  id    Int    @id @default(autoincrement())
  type  String
  url   String
  car   Car    @relation(fields: [carId], references: [id])
  carId Int    @unique

  @@map("medias")
}

model Feature {
  id        Int      @id @default(autoincrement())
  icon      String
  type      String
  value     String
  single    String
  plural    String
  car       Car      @relation(fields: [carId], references: [id])
  carId     Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("features")
}

model Geo {
  id        Int      @id @default(autoincrement())
  lat       Float
  long      Float
  car       Car      @relation(fields: [carId], references: [id])
  carId     Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("geos")
}

model Order {
  id       Int    @id @default(autoincrement())
  owner    User   @relation(name: "OwnerOrders", fields: [ownerId], references: [id])
  ownerId  String
  sender   User   @relation(name: "SenderOrders", fields: [senderId], references: [id])
  senderId String
  car      Car    @relation(fields: [carId], references: [id])
  carId    Int
  status   Int // 0-4

  chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Chat {
  id        Int       @id @default(autoincrement())
  messages  Message[]
  order     Order?
  orderId   Int?      @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}
